Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARRAY
    ASIGNAR
    BREAK
    CASE
    COMA
    COMILLA_DOBLE
    COMILLA_DOBLE_CADENA
    COMILLA_SIMPLE
    COMILLA_SIMPLE_CADENA
    COMNT
    CONTINUE
    DICT
    DIFERENTE
    DIV_ASIGNAR
    DO
    DOSPUNTOS
    ELSE
    ELSEIF
    ENDWHILE
    FOR
    FOREACH
    FUNCION
    FUNCTION
    GLOBAL
    ID
    IF
    IGUAL
    LBRACE
    LBRACKET
    LPAREN
    MAYOR
    MAYOR_IGUAL
    MAYOR_MENOR
    MENOR
    MENOR_IGUAL
    MENOR_MAYOR
    MODULO
    MULT_ASIGNAR
    OBJETO
    POT_ASIGNAR
    PUNTO
    RBRACE
    RBRACKET
    RESTA_ASIGNAR
    RETURN
    RPAREN
    SET
    SUMA_ASIGNAR
    SWITCH
    TUPLE
    VARIABLE_FUNCION
    VARIABLE_OBJETO
    WHILE

Grammar

Rule 0     S' -> sentencia
Rule 1     sentencia -> asignacion
Rule 2     sentencia -> echo
Rule 3     asignacion -> VAR ASIGNACION valor EOL
Rule 4     echo -> ECHO valor EOL
Rule 5     valor -> ENTERO
Rule 6     valor -> FLOTANTE
Rule 7     valor -> BOOLEANO
Rule 8     valor -> CADENA
Rule 9     valor -> VAR
Rule 10    valor -> VARIABLE_ARRAY
Rule 11    valor -> operacion
Rule 12    operacion -> ENTERO
Rule 13    operacion -> FLOTANTE
Rule 14    operacion -> ENTERO operador operacion
Rule 15    operacion -> FLOTANTE operador operacion
Rule 16    operador -> SUMA
Rule 17    operador -> RESTA
Rule 18    operador -> MULT
Rule 19    operador -> DIV
Rule 20    operador -> POT

Terminals, with rules where they appear

ARRAY                : 
ASIGNACION           : 3
ASIGNAR              : 
BOOLEANO             : 7
BREAK                : 
CADENA               : 8
CASE                 : 
COMA                 : 
COMILLA_DOBLE        : 
COMILLA_DOBLE_CADENA : 
COMILLA_SIMPLE       : 
COMILLA_SIMPLE_CADENA : 
COMNT                : 
CONTINUE             : 
DICT                 : 
DIFERENTE            : 
DIV                  : 19
DIV_ASIGNAR          : 
DO                   : 
DOSPUNTOS            : 
ECHO                 : 4
ELSE                 : 
ELSEIF               : 
ENDWHILE             : 
ENTERO               : 5 12 14
EOL                  : 3 4
FLOTANTE             : 6 13 15
FOR                  : 
FOREACH              : 
FUNCION              : 
FUNCTION             : 
GLOBAL               : 
ID                   : 
IF                   : 
IGUAL                : 
LBRACE               : 
LBRACKET             : 
LPAREN               : 
MAYOR                : 
MAYOR_IGUAL          : 
MAYOR_MENOR          : 
MENOR                : 
MENOR_IGUAL          : 
MENOR_MAYOR          : 
MODULO               : 
MULT                 : 18
MULT_ASIGNAR         : 
OBJETO               : 
POT                  : 20
POT_ASIGNAR          : 
PUNTO                : 
RBRACE               : 
RBRACKET             : 
RESTA                : 17
RESTA_ASIGNAR        : 
RETURN               : 
RPAREN               : 
SET                  : 
SUMA                 : 16
SUMA_ASIGNAR         : 
SWITCH               : 
TUPLE                : 
VAR                  : 3 9
VARIABLE_ARRAY       : 10
VARIABLE_FUNCION     : 
VARIABLE_OBJETO      : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

asignacion           : 1
echo                 : 2
operacion            : 11 14 15
operador             : 14 15
sentencia            : 0
valor                : 3 4

Parsing method: LALR

state 0

    (0) S' -> . sentencia
    (1) sentencia -> . asignacion
    (2) sentencia -> . echo
    (3) asignacion -> . VAR ASIGNACION valor EOL
    (4) echo -> . ECHO valor EOL

    VAR             shift and go to state 4
    ECHO            shift and go to state 5

    sentencia                      shift and go to state 1
    asignacion                     shift and go to state 2
    echo                           shift and go to state 3

state 1

    (0) S' -> sentencia .



state 2

    (1) sentencia -> asignacion .

    $end            reduce using rule 1 (sentencia -> asignacion .)


state 3

    (2) sentencia -> echo .

    $end            reduce using rule 2 (sentencia -> echo .)


state 4

    (3) asignacion -> VAR . ASIGNACION valor EOL

    ASIGNACION      shift and go to state 6


state 5

    (4) echo -> ECHO . valor EOL
    (5) valor -> . ENTERO
    (6) valor -> . FLOTANTE
    (7) valor -> . BOOLEANO
    (8) valor -> . CADENA
    (9) valor -> . VAR
    (10) valor -> . VARIABLE_ARRAY
    (11) valor -> . operacion
    (12) operacion -> . ENTERO
    (13) operacion -> . FLOTANTE
    (14) operacion -> . ENTERO operador operacion
    (15) operacion -> . FLOTANTE operador operacion

    ENTERO          shift and go to state 8
    FLOTANTE        shift and go to state 9
    BOOLEANO        shift and go to state 10
    CADENA          shift and go to state 11
    VAR             shift and go to state 12
    VARIABLE_ARRAY  shift and go to state 13

    valor                          shift and go to state 7
    operacion                      shift and go to state 14

state 6

    (3) asignacion -> VAR ASIGNACION . valor EOL
    (5) valor -> . ENTERO
    (6) valor -> . FLOTANTE
    (7) valor -> . BOOLEANO
    (8) valor -> . CADENA
    (9) valor -> . VAR
    (10) valor -> . VARIABLE_ARRAY
    (11) valor -> . operacion
    (12) operacion -> . ENTERO
    (13) operacion -> . FLOTANTE
    (14) operacion -> . ENTERO operador operacion
    (15) operacion -> . FLOTANTE operador operacion

    ENTERO          shift and go to state 8
    FLOTANTE        shift and go to state 9
    BOOLEANO        shift and go to state 10
    CADENA          shift and go to state 11
    VAR             shift and go to state 12
    VARIABLE_ARRAY  shift and go to state 13

    valor                          shift and go to state 15
    operacion                      shift and go to state 14

state 7

    (4) echo -> ECHO valor . EOL

    EOL             shift and go to state 16


state 8

    (5) valor -> ENTERO .
    (12) operacion -> ENTERO .
    (14) operacion -> ENTERO . operador operacion
    (16) operador -> . SUMA
    (17) operador -> . RESTA
    (18) operador -> . MULT
    (19) operador -> . DIV
    (20) operador -> . POT

  ! reduce/reduce conflict for EOL resolved using rule 5 (valor -> ENTERO .)
    EOL             reduce using rule 5 (valor -> ENTERO .)
    SUMA            shift and go to state 18
    RESTA           shift and go to state 19
    MULT            shift and go to state 20
    DIV             shift and go to state 21
    POT             shift and go to state 22

  ! EOL             [ reduce using rule 12 (operacion -> ENTERO .) ]

    operador                       shift and go to state 17

state 9

    (6) valor -> FLOTANTE .
    (13) operacion -> FLOTANTE .
    (15) operacion -> FLOTANTE . operador operacion
    (16) operador -> . SUMA
    (17) operador -> . RESTA
    (18) operador -> . MULT
    (19) operador -> . DIV
    (20) operador -> . POT

  ! reduce/reduce conflict for EOL resolved using rule 6 (valor -> FLOTANTE .)
    EOL             reduce using rule 6 (valor -> FLOTANTE .)
    SUMA            shift and go to state 18
    RESTA           shift and go to state 19
    MULT            shift and go to state 20
    DIV             shift and go to state 21
    POT             shift and go to state 22

  ! EOL             [ reduce using rule 13 (operacion -> FLOTANTE .) ]

    operador                       shift and go to state 23

state 10

    (7) valor -> BOOLEANO .

    EOL             reduce using rule 7 (valor -> BOOLEANO .)


state 11

    (8) valor -> CADENA .

    EOL             reduce using rule 8 (valor -> CADENA .)


state 12

    (9) valor -> VAR .

    EOL             reduce using rule 9 (valor -> VAR .)


state 13

    (10) valor -> VARIABLE_ARRAY .

    EOL             reduce using rule 10 (valor -> VARIABLE_ARRAY .)


state 14

    (11) valor -> operacion .

    EOL             reduce using rule 11 (valor -> operacion .)


state 15

    (3) asignacion -> VAR ASIGNACION valor . EOL

    EOL             shift and go to state 24


state 16

    (4) echo -> ECHO valor EOL .

    $end            reduce using rule 4 (echo -> ECHO valor EOL .)


state 17

    (14) operacion -> ENTERO operador . operacion
    (12) operacion -> . ENTERO
    (13) operacion -> . FLOTANTE
    (14) operacion -> . ENTERO operador operacion
    (15) operacion -> . FLOTANTE operador operacion

    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 27

    operacion                      shift and go to state 26

state 18

    (16) operador -> SUMA .

    ENTERO          reduce using rule 16 (operador -> SUMA .)
    FLOTANTE        reduce using rule 16 (operador -> SUMA .)


state 19

    (17) operador -> RESTA .

    ENTERO          reduce using rule 17 (operador -> RESTA .)
    FLOTANTE        reduce using rule 17 (operador -> RESTA .)


state 20

    (18) operador -> MULT .

    ENTERO          reduce using rule 18 (operador -> MULT .)
    FLOTANTE        reduce using rule 18 (operador -> MULT .)


state 21

    (19) operador -> DIV .

    ENTERO          reduce using rule 19 (operador -> DIV .)
    FLOTANTE        reduce using rule 19 (operador -> DIV .)


state 22

    (20) operador -> POT .

    ENTERO          reduce using rule 20 (operador -> POT .)
    FLOTANTE        reduce using rule 20 (operador -> POT .)


state 23

    (15) operacion -> FLOTANTE operador . operacion
    (12) operacion -> . ENTERO
    (13) operacion -> . FLOTANTE
    (14) operacion -> . ENTERO operador operacion
    (15) operacion -> . FLOTANTE operador operacion

    ENTERO          shift and go to state 25
    FLOTANTE        shift and go to state 27

    operacion                      shift and go to state 28

state 24

    (3) asignacion -> VAR ASIGNACION valor EOL .

    $end            reduce using rule 3 (asignacion -> VAR ASIGNACION valor EOL .)


state 25

    (12) operacion -> ENTERO .
    (14) operacion -> ENTERO . operador operacion
    (16) operador -> . SUMA
    (17) operador -> . RESTA
    (18) operador -> . MULT
    (19) operador -> . DIV
    (20) operador -> . POT

    EOL             reduce using rule 12 (operacion -> ENTERO .)
    SUMA            shift and go to state 18
    RESTA           shift and go to state 19
    MULT            shift and go to state 20
    DIV             shift and go to state 21
    POT             shift and go to state 22

    operador                       shift and go to state 17

state 26

    (14) operacion -> ENTERO operador operacion .

    EOL             reduce using rule 14 (operacion -> ENTERO operador operacion .)


state 27

    (13) operacion -> FLOTANTE .
    (15) operacion -> FLOTANTE . operador operacion
    (16) operador -> . SUMA
    (17) operador -> . RESTA
    (18) operador -> . MULT
    (19) operador -> . DIV
    (20) operador -> . POT

    EOL             reduce using rule 13 (operacion -> FLOTANTE .)
    SUMA            shift and go to state 18
    RESTA           shift and go to state 19
    MULT            shift and go to state 20
    DIV             shift and go to state 21
    POT             shift and go to state 22

    operador                       shift and go to state 23

state 28

    (15) operacion -> FLOTANTE operador operacion .

    EOL             reduce using rule 15 (operacion -> FLOTANTE operador operacion .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 8 resolved using rule (valor -> ENTERO)
WARNING: rejected rule (operacion -> ENTERO) in state 8
WARNING: reduce/reduce conflict in state 9 resolved using rule (valor -> FLOTANTE)
WARNING: rejected rule (operacion -> FLOTANTE) in state 9

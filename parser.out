Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASIGNAR
    BREAK
    CASE
    COMILLA_DOBLE
    COMILLA_DOBLE_CADENA
    COMILLA_SIMPLE
    COMILLA_SIMPLE_CADENA
    CONTINUE
    DICT
    DIV_ASIGNAR
    DO
    DOSPUNTOS
    ENDWHILE
    FOR
    FOREACH
    GLOBAL
    ID
    LBRACKET
    MAYOR_MENOR
    MENOR_MAYOR
    MODULO
    MULT_ASIGNAR
    POT_ASIGNAR
    PUNTO
    RBRACKET
    RESTA_ASIGNAR
    SET
    SUMA_ASIGNAR
    SWITCH
    TUPLE

Grammar

Rule 0     S' -> sentencia
Rule 1     sentencia -> asignacion
Rule 2     sentencia -> echo
Rule 3     sentencia -> estructuracontrol
Rule 4     sentencia -> comentario
Rule 5     sentencia -> declaracion_numeros
Rule 6     sentencia -> array
Rule 7     sentencia -> funcion
Rule 8     asignacion -> VAR ASIGNACION valor EOL
Rule 9     echo -> ECHO valores EOL
Rule 10    valores -> valor
Rule 11    valores -> valor COMA valores
Rule 12    valor -> ENTERO
Rule 13    valor -> FLOTANTE
Rule 14    valor -> BOOLEANO
Rule 15    valor -> CADENA
Rule 16    valor -> VAR
Rule 17    valor -> VARIABLE_ARRAY
Rule 18    valor -> operacion
Rule 19    valor -> argumentologico
Rule 20    operacion -> ENTERO
Rule 21    operacion -> FLOTANTE
Rule 22    operacion -> ENTERO operador operacion
Rule 23    operacion -> FLOTANTE operador operacion
Rule 24    estructuracontrol -> while
Rule 25    estructuracontrol -> if
Rule 26    while -> WHILE LPAREN condicion RPAREN LBRACE RBRACE
Rule 27    if -> IF LPAREN condicion RPAREN LBRACE RBRACE
Rule 28    if -> if else
Rule 29    if -> if elseif else
Rule 30    if -> if elseif
Rule 31    elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE
Rule 32    elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif
Rule 33    else -> ELSE LBRACE RBRACE
Rule 34    condicion -> argumentologico
Rule 35    condicion -> argumentologico conector_logico condicion
Rule 36    vacio -> EOL
Rule 37    conector_logico -> AND
Rule 38    conector_logico -> OR
Rule 39    valor_logico -> numero
Rule 40    valor_logico -> VAR
Rule 41    argumentologico -> VAR operador_logico VAR
Rule 42    argumentologico -> numero operador_logico numero
Rule 43    argumentologico -> VAR operador_logico numero
Rule 44    argumentologico -> VAR IGUAL BOOLEANO
Rule 45    argumentologico -> VAR IGUAL CADENA
Rule 46    argumentologico -> VAR DIFERENTE BOOLEANO
Rule 47    argumentologico -> VAR DIFERENTE CADENA
Rule 48    argumentologico -> numero operador_logico VAR
Rule 49    argumentologico -> BOOLEANO IGUAL VAR
Rule 50    argumentologico -> CADENA IGUAL VAR
Rule 51    argumentologico -> CADENA IGUAL CADENA
Rule 52    argumentologico -> CADENA DIFERENTE VAR
Rule 53    argumentologico -> CADENA DIFERENTE CADENA
Rule 54    argumentologico -> BOOLEANO
Rule 55    operador_logico -> IGUAL
Rule 56    operador_logico -> DIFERENTE
Rule 57    operador_logico -> MENOR
Rule 58    operador_logico -> MAYOR
Rule 59    operador_logico -> MENOR_IGUAL
Rule 60    operador_logico -> MAYOR_IGUAL
Rule 61    comentario -> COMNT
Rule 62    operador -> SUMA
Rule 63    operador -> RESTA
Rule 64    operador -> MULT
Rule 65    operador -> DIV
Rule 66    operador -> POT
Rule 67    numero -> ENTERO
Rule 68    numero -> FLOTANTE
Rule 69    declaracion_numeros -> VAR ASIGNACION numero EOL
Rule 70    array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL
Rule 71    elementos -> lista
Rule 72    elementos -> diccionario
Rule 73    diccionario -> CADENA ASIGNACION MAYOR valor_dic
Rule 74    diccionario -> CADENA ASIGNACION MAYOR valor COMA diccionario
Rule 75    valor_dic -> numero
Rule 76    valor_dic -> CADENA
Rule 77    lista -> palabras
Rule 78    lista -> numeros
Rule 79    lista -> variables
Rule 80    palabras -> CADENA COMA palabras
Rule 81    palabras -> CADENA
Rule 82    numeros -> numero COMA numeros
Rule 83    numeros -> numero
Rule 84    variables -> VAR COMA variables
Rule 85    variables -> VAR
Rule 86    funcion -> FUNCTION tipo_funcion LBRACE final_funcion RBRACE
Rule 87    tipo_funcion -> FUNCION
Rule 88    tipo_funcion -> VARIABLE_FUNCION
Rule 89    final_funcion -> RETURN VAR EOL
Rule 90    final_funcion -> cuerpo_funcion
Rule 91    cuerpo_funcion -> declaracion_numeros final_funcion
Rule 92    cuerpo_funcion -> array final_funcion
Rule 93    cuerpo_funcion -> estructuracontrol final_funcion
Rule 94    ingreso_datos -> VAR ASIGNACION readline EOL
Rule 95    readline -> READLINE LPAREN CADENA RPAREN
Rule 96    objeto -> CLASE OBJETO LBRACE mas_objetos RBRACE VAR ASIGNACION NEW OBJETO LPAREN RPAREN EOL VARIABLE_OBJETO ASIGNACION CADENA EOL
Rule 97    objeto -> CLASE OBJETO LBRACE mas_objetos PUBLIC VAR EOL RBRACE
Rule 98    objeto -> CLASE OBJETO LBRACE mas_objetos RBRACE VAR ASIGNACION NEW OBJETO LPAREN RPAREN EOL
Rule 99    objeto -> CLASE OBJETO LBRACE mas_objetos RBRACE VAR ASIGNACION NEW OBJETO LPAREN RPAREN EOL VARIABLE_OBJETO EOL
Rule 100   cuerpo_objeto -> PUBLIC VAR EOL
Rule 101   mas_objetos -> cuerpo_objeto
Rule 102   mas_objetos -> cuerpo_objeto mas_objetos

Terminals, with rules where they appear

AND                  : 37
ARRAY                : 70
ASIGNACION           : 8 69 70 73 74 94 96 96 98 99
ASIGNAR              : 
BOOLEANO             : 14 44 46 49 54
BREAK                : 
CADENA               : 15 45 47 50 51 51 52 53 53 73 74 76 80 81 95 96
CASE                 : 
CLASE                : 96 97 98 99
COMA                 : 11 74 80 82 84
COMILLA_DOBLE        : 
COMILLA_DOBLE_CADENA : 
COMILLA_SIMPLE       : 
COMILLA_SIMPLE_CADENA : 
COMNT                : 61
CONTINUE             : 
DICT                 : 
DIFERENTE            : 46 47 52 53 56
DIV                  : 65
DIV_ASIGNAR          : 
DO                   : 
DOSPUNTOS            : 
ECHO                 : 9
ELSE                 : 33
ELSEIF               : 31 32
ENDWHILE             : 
ENTERO               : 12 20 22 67
EOL                  : 8 9 36 69 70 89 94 96 96 97 98 99 99 100
FLOTANTE             : 13 21 23 68
FOR                  : 
FOREACH              : 
FUNCION              : 87
FUNCTION             : 86
GLOBAL               : 
ID                   : 
IF                   : 27
IGUAL                : 44 45 49 50 51 55
LBRACE               : 26 27 31 32 33 86 96 97 98 99
LBRACKET             : 
LPAREN               : 26 27 31 32 70 95 96 98 99
MAYOR                : 58 73 74
MAYOR_IGUAL          : 60
MAYOR_MENOR          : 
MENOR                : 57
MENOR_IGUAL          : 59
MENOR_MAYOR          : 
MODULO               : 
MULT                 : 64
MULT_ASIGNAR         : 
NEW                  : 96 98 99
OBJETO               : 96 96 97 98 98 99 99
OR                   : 38
POT                  : 66
POT_ASIGNAR          : 
PUBLIC               : 97 100
PUNTO                : 
RBRACE               : 26 27 31 32 33 86 96 97 98 99
RBRACKET             : 
READLINE             : 95
RESTA                : 63
RESTA_ASIGNAR        : 
RETURN               : 89
RPAREN               : 26 27 31 32 70 95 96 98 99
SET                  : 
SUMA                 : 62
SUMA_ASIGNAR         : 
SWITCH               : 
TUPLE                : 
VAR                  : 8 16 40 41 41 43 44 45 46 47 48 49 50 52 69 70 84 85 89 94 96 97 98 99 100
VARIABLE_ARRAY       : 17
VARIABLE_FUNCION     : 88
VARIABLE_OBJETO      : 96 99
WHILE                : 26
error                : 

Nonterminals, with rules where they appear

argumentologico      : 19 34 35
array                : 6 92
asignacion           : 1
comentario           : 4
condicion            : 26 27 31 32 35
conector_logico      : 35
cuerpo_funcion       : 90
cuerpo_objeto        : 101 102
declaracion_numeros  : 5 91
diccionario          : 72 74
echo                 : 2
elementos            : 70
else                 : 28 29
elseif               : 29 30 32
estructuracontrol    : 3 93
final_funcion        : 86 91 92 93
funcion              : 7
if                   : 25 28 29 30
ingreso_datos        : 
lista                : 71
mas_objetos          : 96 97 98 99 102
numero               : 39 42 42 43 48 69 75 82 83
numeros              : 78 82
objeto               : 
operacion            : 18 22 23
operador             : 22 23
operador_logico      : 41 42 43 48
palabras             : 77 80
readline             : 94
sentencia            : 0
tipo_funcion         : 86
vacio                : 
valor                : 8 10 11 74
valor_dic            : 73
valor_logico         : 
valores              : 9 11
variables            : 79 84
while                : 24

Parsing method: LALR

state 0

    (0) S' -> . sentencia
    (1) sentencia -> . asignacion
    (2) sentencia -> . echo
    (3) sentencia -> . estructuracontrol
    (4) sentencia -> . comentario
    (5) sentencia -> . declaracion_numeros
    (6) sentencia -> . array
    (7) sentencia -> . funcion
    (8) asignacion -> . VAR ASIGNACION valor EOL
    (9) echo -> . ECHO valores EOL
    (24) estructuracontrol -> . while
    (25) estructuracontrol -> . if
    (61) comentario -> . COMNT
    (69) declaracion_numeros -> . VAR ASIGNACION numero EOL
    (70) array -> . VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL
    (86) funcion -> . FUNCTION tipo_funcion LBRACE final_funcion RBRACE
    (26) while -> . WHILE LPAREN condicion RPAREN LBRACE RBRACE
    (27) if -> . IF LPAREN condicion RPAREN LBRACE RBRACE
    (28) if -> . if else
    (29) if -> . if elseif else
    (30) if -> . if elseif

    VAR             shift and go to state 9
    ECHO            shift and go to state 10
    COMNT           shift and go to state 13
    FUNCTION        shift and go to state 14
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    sentencia                      shift and go to state 1
    asignacion                     shift and go to state 2
    echo                           shift and go to state 3
    estructuracontrol              shift and go to state 4
    comentario                     shift and go to state 5
    declaracion_numeros            shift and go to state 6
    array                          shift and go to state 7
    funcion                        shift and go to state 8
    while                          shift and go to state 11
    if                             shift and go to state 12

state 1

    (0) S' -> sentencia .



state 2

    (1) sentencia -> asignacion .

    $end            reduce using rule 1 (sentencia -> asignacion .)


state 3

    (2) sentencia -> echo .

    $end            reduce using rule 2 (sentencia -> echo .)


state 4

    (3) sentencia -> estructuracontrol .

    $end            reduce using rule 3 (sentencia -> estructuracontrol .)


state 5

    (4) sentencia -> comentario .

    $end            reduce using rule 4 (sentencia -> comentario .)


state 6

    (5) sentencia -> declaracion_numeros .

    $end            reduce using rule 5 (sentencia -> declaracion_numeros .)


state 7

    (6) sentencia -> array .

    $end            reduce using rule 6 (sentencia -> array .)


state 8

    (7) sentencia -> funcion .

    $end            reduce using rule 7 (sentencia -> funcion .)


state 9

    (8) asignacion -> VAR . ASIGNACION valor EOL
    (69) declaracion_numeros -> VAR . ASIGNACION numero EOL
    (70) array -> VAR . ASIGNACION ARRAY LPAREN elementos RPAREN EOL

    ASIGNACION      shift and go to state 17


state 10

    (9) echo -> ECHO . valores EOL
    (10) valores -> . valor
    (11) valores -> . valor COMA valores
    (12) valor -> . ENTERO
    (13) valor -> . FLOTANTE
    (14) valor -> . BOOLEANO
    (15) valor -> . CADENA
    (16) valor -> . VAR
    (17) valor -> . VARIABLE_ARRAY
    (18) valor -> . operacion
    (19) valor -> . argumentologico
    (20) operacion -> . ENTERO
    (21) operacion -> . FLOTANTE
    (22) operacion -> . ENTERO operador operacion
    (23) operacion -> . FLOTANTE operador operacion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    ENTERO          shift and go to state 20
    FLOTANTE        shift and go to state 21
    BOOLEANO        shift and go to state 22
    CADENA          shift and go to state 23
    VAR             shift and go to state 24
    VARIABLE_ARRAY  shift and go to state 25

    valores                        shift and go to state 18
    valor                          shift and go to state 19
    operacion                      shift and go to state 26
    argumentologico                shift and go to state 27
    numero                         shift and go to state 28

state 11

    (24) estructuracontrol -> while .

    $end            reduce using rule 24 (estructuracontrol -> while .)
    RETURN          reduce using rule 24 (estructuracontrol -> while .)
    VAR             reduce using rule 24 (estructuracontrol -> while .)
    WHILE           reduce using rule 24 (estructuracontrol -> while .)
    IF              reduce using rule 24 (estructuracontrol -> while .)


state 12

    (25) estructuracontrol -> if .
    (28) if -> if . else
    (29) if -> if . elseif else
    (30) if -> if . elseif
    (33) else -> . ELSE LBRACE RBRACE
    (31) elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE RBRACE
    (32) elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif

    $end            reduce using rule 25 (estructuracontrol -> if .)
    RETURN          reduce using rule 25 (estructuracontrol -> if .)
    VAR             reduce using rule 25 (estructuracontrol -> if .)
    WHILE           reduce using rule 25 (estructuracontrol -> if .)
    IF              reduce using rule 25 (estructuracontrol -> if .)
    ELSE            shift and go to state 31
    ELSEIF          shift and go to state 32

    else                           shift and go to state 29
    elseif                         shift and go to state 30

state 13

    (61) comentario -> COMNT .

    $end            reduce using rule 61 (comentario -> COMNT .)


state 14

    (86) funcion -> FUNCTION . tipo_funcion LBRACE final_funcion RBRACE
    (87) tipo_funcion -> . FUNCION
    (88) tipo_funcion -> . VARIABLE_FUNCION

    FUNCION         shift and go to state 34
    VARIABLE_FUNCION shift and go to state 35

    tipo_funcion                   shift and go to state 33

state 15

    (26) while -> WHILE . LPAREN condicion RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 36


state 16

    (27) if -> IF . LPAREN condicion RPAREN LBRACE RBRACE

    LPAREN          shift and go to state 37


state 17

    (8) asignacion -> VAR ASIGNACION . valor EOL
    (69) declaracion_numeros -> VAR ASIGNACION . numero EOL
    (70) array -> VAR ASIGNACION . ARRAY LPAREN elementos RPAREN EOL
    (12) valor -> . ENTERO
    (13) valor -> . FLOTANTE
    (14) valor -> . BOOLEANO
    (15) valor -> . CADENA
    (16) valor -> . VAR
    (17) valor -> . VARIABLE_ARRAY
    (18) valor -> . operacion
    (19) valor -> . argumentologico
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE
    (20) operacion -> . ENTERO
    (21) operacion -> . FLOTANTE
    (22) operacion -> . ENTERO operador operacion
    (23) operacion -> . FLOTANTE operador operacion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO

    ARRAY           shift and go to state 40
    ENTERO          shift and go to state 41
    FLOTANTE        shift and go to state 42
    BOOLEANO        shift and go to state 22
    CADENA          shift and go to state 23
    VAR             shift and go to state 24
    VARIABLE_ARRAY  shift and go to state 25

    valor                          shift and go to state 38
    numero                         shift and go to state 39
    operacion                      shift and go to state 26
    argumentologico                shift and go to state 27

state 18

    (9) echo -> ECHO valores . EOL

    EOL             shift and go to state 43


state 19

    (10) valores -> valor .
    (11) valores -> valor . COMA valores

    EOL             reduce using rule 10 (valores -> valor .)
    COMA            shift and go to state 44


state 20

    (12) valor -> ENTERO .
    (20) operacion -> ENTERO .
    (22) operacion -> ENTERO . operador operacion
    (67) numero -> ENTERO .
    (62) operador -> . SUMA
    (63) operador -> . RESTA
    (64) operador -> . MULT
    (65) operador -> . DIV
    (66) operador -> . POT

  ! reduce/reduce conflict for COMA resolved using rule 12 (valor -> ENTERO .)
  ! reduce/reduce conflict for EOL resolved using rule 12 (valor -> ENTERO .)
    COMA            reduce using rule 12 (valor -> ENTERO .)
    EOL             reduce using rule 12 (valor -> ENTERO .)
    IGUAL           reduce using rule 67 (numero -> ENTERO .)
    DIFERENTE       reduce using rule 67 (numero -> ENTERO .)
    MENOR           reduce using rule 67 (numero -> ENTERO .)
    MAYOR           reduce using rule 67 (numero -> ENTERO .)
    MENOR_IGUAL     reduce using rule 67 (numero -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 67 (numero -> ENTERO .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULT            shift and go to state 48
    DIV             shift and go to state 49
    POT             shift and go to state 50

  ! COMA            [ reduce using rule 20 (operacion -> ENTERO .) ]
  ! EOL             [ reduce using rule 20 (operacion -> ENTERO .) ]

    operador                       shift and go to state 45

state 21

    (13) valor -> FLOTANTE .
    (21) operacion -> FLOTANTE .
    (23) operacion -> FLOTANTE . operador operacion
    (68) numero -> FLOTANTE .
    (62) operador -> . SUMA
    (63) operador -> . RESTA
    (64) operador -> . MULT
    (65) operador -> . DIV
    (66) operador -> . POT

  ! reduce/reduce conflict for COMA resolved using rule 13 (valor -> FLOTANTE .)
  ! reduce/reduce conflict for EOL resolved using rule 13 (valor -> FLOTANTE .)
    COMA            reduce using rule 13 (valor -> FLOTANTE .)
    EOL             reduce using rule 13 (valor -> FLOTANTE .)
    IGUAL           reduce using rule 68 (numero -> FLOTANTE .)
    DIFERENTE       reduce using rule 68 (numero -> FLOTANTE .)
    MENOR           reduce using rule 68 (numero -> FLOTANTE .)
    MAYOR           reduce using rule 68 (numero -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 68 (numero -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 68 (numero -> FLOTANTE .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULT            shift and go to state 48
    DIV             shift and go to state 49
    POT             shift and go to state 50

  ! COMA            [ reduce using rule 21 (operacion -> FLOTANTE .) ]
  ! EOL             [ reduce using rule 21 (operacion -> FLOTANTE .) ]

    operador                       shift and go to state 51

state 22

    (14) valor -> BOOLEANO .
    (49) argumentologico -> BOOLEANO . IGUAL VAR
    (54) argumentologico -> BOOLEANO .

  ! reduce/reduce conflict for COMA resolved using rule 14 (valor -> BOOLEANO .)
  ! reduce/reduce conflict for EOL resolved using rule 14 (valor -> BOOLEANO .)
    COMA            reduce using rule 14 (valor -> BOOLEANO .)
    EOL             reduce using rule 14 (valor -> BOOLEANO .)
    IGUAL           shift and go to state 52

  ! COMA            [ reduce using rule 54 (argumentologico -> BOOLEANO .) ]
  ! EOL             [ reduce using rule 54 (argumentologico -> BOOLEANO .) ]


state 23

    (15) valor -> CADENA .
    (50) argumentologico -> CADENA . IGUAL VAR
    (51) argumentologico -> CADENA . IGUAL CADENA
    (52) argumentologico -> CADENA . DIFERENTE VAR
    (53) argumentologico -> CADENA . DIFERENTE CADENA

    COMA            reduce using rule 15 (valor -> CADENA .)
    EOL             reduce using rule 15 (valor -> CADENA .)
    IGUAL           shift and go to state 53
    DIFERENTE       shift and go to state 54


state 24

    (16) valor -> VAR .
    (41) argumentologico -> VAR . operador_logico VAR
    (43) argumentologico -> VAR . operador_logico numero
    (44) argumentologico -> VAR . IGUAL BOOLEANO
    (45) argumentologico -> VAR . IGUAL CADENA
    (46) argumentologico -> VAR . DIFERENTE BOOLEANO
    (47) argumentologico -> VAR . DIFERENTE CADENA
    (55) operador_logico -> . IGUAL
    (56) operador_logico -> . DIFERENTE
    (57) operador_logico -> . MENOR
    (58) operador_logico -> . MAYOR
    (59) operador_logico -> . MENOR_IGUAL
    (60) operador_logico -> . MAYOR_IGUAL

    COMA            reduce using rule 16 (valor -> VAR .)
    EOL             reduce using rule 16 (valor -> VAR .)
    IGUAL           shift and go to state 56
    DIFERENTE       shift and go to state 57
    MENOR           shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR_IGUAL     shift and go to state 60
    MAYOR_IGUAL     shift and go to state 61

    operador_logico                shift and go to state 55

state 25

    (17) valor -> VARIABLE_ARRAY .

    COMA            reduce using rule 17 (valor -> VARIABLE_ARRAY .)
    EOL             reduce using rule 17 (valor -> VARIABLE_ARRAY .)


state 26

    (18) valor -> operacion .

    COMA            reduce using rule 18 (valor -> operacion .)
    EOL             reduce using rule 18 (valor -> operacion .)


state 27

    (19) valor -> argumentologico .

    COMA            reduce using rule 19 (valor -> argumentologico .)
    EOL             reduce using rule 19 (valor -> argumentologico .)


state 28

    (42) argumentologico -> numero . operador_logico numero
    (48) argumentologico -> numero . operador_logico VAR
    (55) operador_logico -> . IGUAL
    (56) operador_logico -> . DIFERENTE
    (57) operador_logico -> . MENOR
    (58) operador_logico -> . MAYOR
    (59) operador_logico -> . MENOR_IGUAL
    (60) operador_logico -> . MAYOR_IGUAL

    IGUAL           shift and go to state 63
    DIFERENTE       shift and go to state 64
    MENOR           shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR_IGUAL     shift and go to state 60
    MAYOR_IGUAL     shift and go to state 61

    operador_logico                shift and go to state 62

state 29

    (28) if -> if else .

    ELSE            reduce using rule 28 (if -> if else .)
    ELSEIF          reduce using rule 28 (if -> if else .)
    $end            reduce using rule 28 (if -> if else .)
    RETURN          reduce using rule 28 (if -> if else .)
    VAR             reduce using rule 28 (if -> if else .)
    WHILE           reduce using rule 28 (if -> if else .)
    IF              reduce using rule 28 (if -> if else .)


state 30

    (29) if -> if elseif . else
    (30) if -> if elseif .
    (33) else -> . ELSE LBRACE RBRACE

  ! shift/reduce conflict for ELSE resolved as shift
    ELSEIF          reduce using rule 30 (if -> if elseif .)
    $end            reduce using rule 30 (if -> if elseif .)
    RETURN          reduce using rule 30 (if -> if elseif .)
    VAR             reduce using rule 30 (if -> if elseif .)
    WHILE           reduce using rule 30 (if -> if elseif .)
    IF              reduce using rule 30 (if -> if elseif .)
    ELSE            shift and go to state 31

  ! ELSE            [ reduce using rule 30 (if -> if elseif .) ]

    else                           shift and go to state 65

state 31

    (33) else -> ELSE . LBRACE RBRACE

    LBRACE          shift and go to state 66


state 32

    (31) elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE RBRACE
    (32) elseif -> ELSEIF . LPAREN condicion RPAREN LBRACE RBRACE elseif

    LPAREN          shift and go to state 67


state 33

    (86) funcion -> FUNCTION tipo_funcion . LBRACE final_funcion RBRACE

    LBRACE          shift and go to state 68


state 34

    (87) tipo_funcion -> FUNCION .

    LBRACE          reduce using rule 87 (tipo_funcion -> FUNCION .)


state 35

    (88) tipo_funcion -> VARIABLE_FUNCION .

    LBRACE          reduce using rule 88 (tipo_funcion -> VARIABLE_FUNCION .)


state 36

    (26) while -> WHILE LPAREN . condicion RPAREN LBRACE RBRACE
    (34) condicion -> . argumentologico
    (35) condicion -> . argumentologico conector_logico condicion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    VAR             shift and go to state 71
    BOOLEANO        shift and go to state 72
    CADENA          shift and go to state 73
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    condicion                      shift and go to state 69
    argumentologico                shift and go to state 70
    numero                         shift and go to state 28

state 37

    (27) if -> IF LPAREN . condicion RPAREN LBRACE RBRACE
    (34) condicion -> . argumentologico
    (35) condicion -> . argumentologico conector_logico condicion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    VAR             shift and go to state 71
    BOOLEANO        shift and go to state 72
    CADENA          shift and go to state 73
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    condicion                      shift and go to state 76
    argumentologico                shift and go to state 70
    numero                         shift and go to state 28

state 38

    (8) asignacion -> VAR ASIGNACION valor . EOL

    EOL             shift and go to state 77


state 39

    (69) declaracion_numeros -> VAR ASIGNACION numero . EOL
    (42) argumentologico -> numero . operador_logico numero
    (48) argumentologico -> numero . operador_logico VAR
    (55) operador_logico -> . IGUAL
    (56) operador_logico -> . DIFERENTE
    (57) operador_logico -> . MENOR
    (58) operador_logico -> . MAYOR
    (59) operador_logico -> . MENOR_IGUAL
    (60) operador_logico -> . MAYOR_IGUAL

    EOL             shift and go to state 78
    IGUAL           shift and go to state 63
    DIFERENTE       shift and go to state 64
    MENOR           shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR_IGUAL     shift and go to state 60
    MAYOR_IGUAL     shift and go to state 61

    operador_logico                shift and go to state 62

state 40

    (70) array -> VAR ASIGNACION ARRAY . LPAREN elementos RPAREN EOL

    LPAREN          shift and go to state 79


state 41

    (12) valor -> ENTERO .
    (67) numero -> ENTERO .
    (20) operacion -> ENTERO .
    (22) operacion -> ENTERO . operador operacion
    (62) operador -> . SUMA
    (63) operador -> . RESTA
    (64) operador -> . MULT
    (65) operador -> . DIV
    (66) operador -> . POT

  ! reduce/reduce conflict for EOL resolved using rule 12 (valor -> ENTERO .)
  ! reduce/reduce conflict for EOL resolved using rule 12 (valor -> ENTERO .)
  ! reduce/reduce conflict for COMA resolved using rule 12 (valor -> ENTERO .)
    EOL             reduce using rule 12 (valor -> ENTERO .)
    COMA            reduce using rule 12 (valor -> ENTERO .)
    IGUAL           reduce using rule 67 (numero -> ENTERO .)
    DIFERENTE       reduce using rule 67 (numero -> ENTERO .)
    MENOR           reduce using rule 67 (numero -> ENTERO .)
    MAYOR           reduce using rule 67 (numero -> ENTERO .)
    MENOR_IGUAL     reduce using rule 67 (numero -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 67 (numero -> ENTERO .)
    RPAREN          reduce using rule 67 (numero -> ENTERO .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULT            shift and go to state 48
    DIV             shift and go to state 49
    POT             shift and go to state 50

  ! EOL             [ reduce using rule 67 (numero -> ENTERO .) ]
  ! EOL             [ reduce using rule 20 (operacion -> ENTERO .) ]
  ! COMA            [ reduce using rule 20 (operacion -> ENTERO .) ]

    operador                       shift and go to state 45

state 42

    (13) valor -> FLOTANTE .
    (68) numero -> FLOTANTE .
    (21) operacion -> FLOTANTE .
    (23) operacion -> FLOTANTE . operador operacion
    (62) operador -> . SUMA
    (63) operador -> . RESTA
    (64) operador -> . MULT
    (65) operador -> . DIV
    (66) operador -> . POT

  ! reduce/reduce conflict for EOL resolved using rule 13 (valor -> FLOTANTE .)
  ! reduce/reduce conflict for EOL resolved using rule 13 (valor -> FLOTANTE .)
  ! reduce/reduce conflict for COMA resolved using rule 13 (valor -> FLOTANTE .)
    EOL             reduce using rule 13 (valor -> FLOTANTE .)
    COMA            reduce using rule 13 (valor -> FLOTANTE .)
    IGUAL           reduce using rule 68 (numero -> FLOTANTE .)
    DIFERENTE       reduce using rule 68 (numero -> FLOTANTE .)
    MENOR           reduce using rule 68 (numero -> FLOTANTE .)
    MAYOR           reduce using rule 68 (numero -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 68 (numero -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 68 (numero -> FLOTANTE .)
    RPAREN          reduce using rule 68 (numero -> FLOTANTE .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULT            shift and go to state 48
    DIV             shift and go to state 49
    POT             shift and go to state 50

  ! EOL             [ reduce using rule 68 (numero -> FLOTANTE .) ]
  ! EOL             [ reduce using rule 21 (operacion -> FLOTANTE .) ]
  ! COMA            [ reduce using rule 21 (operacion -> FLOTANTE .) ]

    operador                       shift and go to state 51

state 43

    (9) echo -> ECHO valores EOL .

    $end            reduce using rule 9 (echo -> ECHO valores EOL .)


state 44

    (11) valores -> valor COMA . valores
    (10) valores -> . valor
    (11) valores -> . valor COMA valores
    (12) valor -> . ENTERO
    (13) valor -> . FLOTANTE
    (14) valor -> . BOOLEANO
    (15) valor -> . CADENA
    (16) valor -> . VAR
    (17) valor -> . VARIABLE_ARRAY
    (18) valor -> . operacion
    (19) valor -> . argumentologico
    (20) operacion -> . ENTERO
    (21) operacion -> . FLOTANTE
    (22) operacion -> . ENTERO operador operacion
    (23) operacion -> . FLOTANTE operador operacion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    ENTERO          shift and go to state 20
    FLOTANTE        shift and go to state 21
    BOOLEANO        shift and go to state 22
    CADENA          shift and go to state 23
    VAR             shift and go to state 24
    VARIABLE_ARRAY  shift and go to state 25

    valor                          shift and go to state 19
    valores                        shift and go to state 80
    operacion                      shift and go to state 26
    argumentologico                shift and go to state 27
    numero                         shift and go to state 28

state 45

    (22) operacion -> ENTERO operador . operacion
    (20) operacion -> . ENTERO
    (21) operacion -> . FLOTANTE
    (22) operacion -> . ENTERO operador operacion
    (23) operacion -> . FLOTANTE operador operacion

    ENTERO          shift and go to state 81
    FLOTANTE        shift and go to state 83

    operacion                      shift and go to state 82

state 46

    (62) operador -> SUMA .

    ENTERO          reduce using rule 62 (operador -> SUMA .)
    FLOTANTE        reduce using rule 62 (operador -> SUMA .)


state 47

    (63) operador -> RESTA .

    ENTERO          reduce using rule 63 (operador -> RESTA .)
    FLOTANTE        reduce using rule 63 (operador -> RESTA .)


state 48

    (64) operador -> MULT .

    ENTERO          reduce using rule 64 (operador -> MULT .)
    FLOTANTE        reduce using rule 64 (operador -> MULT .)


state 49

    (65) operador -> DIV .

    ENTERO          reduce using rule 65 (operador -> DIV .)
    FLOTANTE        reduce using rule 65 (operador -> DIV .)


state 50

    (66) operador -> POT .

    ENTERO          reduce using rule 66 (operador -> POT .)
    FLOTANTE        reduce using rule 66 (operador -> POT .)


state 51

    (23) operacion -> FLOTANTE operador . operacion
    (20) operacion -> . ENTERO
    (21) operacion -> . FLOTANTE
    (22) operacion -> . ENTERO operador operacion
    (23) operacion -> . FLOTANTE operador operacion

    ENTERO          shift and go to state 81
    FLOTANTE        shift and go to state 83

    operacion                      shift and go to state 84

state 52

    (49) argumentologico -> BOOLEANO IGUAL . VAR

    VAR             shift and go to state 85


state 53

    (50) argumentologico -> CADENA IGUAL . VAR
    (51) argumentologico -> CADENA IGUAL . CADENA

    VAR             shift and go to state 87
    CADENA          shift and go to state 86


state 54

    (52) argumentologico -> CADENA DIFERENTE . VAR
    (53) argumentologico -> CADENA DIFERENTE . CADENA

    VAR             shift and go to state 89
    CADENA          shift and go to state 88


state 55

    (41) argumentologico -> VAR operador_logico . VAR
    (43) argumentologico -> VAR operador_logico . numero
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    VAR             shift and go to state 90
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    numero                         shift and go to state 91

state 56

    (44) argumentologico -> VAR IGUAL . BOOLEANO
    (45) argumentologico -> VAR IGUAL . CADENA
    (55) operador_logico -> IGUAL .

    BOOLEANO        shift and go to state 92
    CADENA          shift and go to state 93
    VAR             reduce using rule 55 (operador_logico -> IGUAL .)
    ENTERO          reduce using rule 55 (operador_logico -> IGUAL .)
    FLOTANTE        reduce using rule 55 (operador_logico -> IGUAL .)


state 57

    (46) argumentologico -> VAR DIFERENTE . BOOLEANO
    (47) argumentologico -> VAR DIFERENTE . CADENA
    (56) operador_logico -> DIFERENTE .

    BOOLEANO        shift and go to state 94
    CADENA          shift and go to state 95
    VAR             reduce using rule 56 (operador_logico -> DIFERENTE .)
    ENTERO          reduce using rule 56 (operador_logico -> DIFERENTE .)
    FLOTANTE        reduce using rule 56 (operador_logico -> DIFERENTE .)


state 58

    (57) operador_logico -> MENOR .

    VAR             reduce using rule 57 (operador_logico -> MENOR .)
    ENTERO          reduce using rule 57 (operador_logico -> MENOR .)
    FLOTANTE        reduce using rule 57 (operador_logico -> MENOR .)


state 59

    (58) operador_logico -> MAYOR .

    VAR             reduce using rule 58 (operador_logico -> MAYOR .)
    ENTERO          reduce using rule 58 (operador_logico -> MAYOR .)
    FLOTANTE        reduce using rule 58 (operador_logico -> MAYOR .)


state 60

    (59) operador_logico -> MENOR_IGUAL .

    VAR             reduce using rule 59 (operador_logico -> MENOR_IGUAL .)
    ENTERO          reduce using rule 59 (operador_logico -> MENOR_IGUAL .)
    FLOTANTE        reduce using rule 59 (operador_logico -> MENOR_IGUAL .)


state 61

    (60) operador_logico -> MAYOR_IGUAL .

    VAR             reduce using rule 60 (operador_logico -> MAYOR_IGUAL .)
    ENTERO          reduce using rule 60 (operador_logico -> MAYOR_IGUAL .)
    FLOTANTE        reduce using rule 60 (operador_logico -> MAYOR_IGUAL .)


state 62

    (42) argumentologico -> numero operador_logico . numero
    (48) argumentologico -> numero operador_logico . VAR
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    VAR             shift and go to state 97
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    numero                         shift and go to state 96

state 63

    (55) operador_logico -> IGUAL .

    VAR             reduce using rule 55 (operador_logico -> IGUAL .)
    ENTERO          reduce using rule 55 (operador_logico -> IGUAL .)
    FLOTANTE        reduce using rule 55 (operador_logico -> IGUAL .)


state 64

    (56) operador_logico -> DIFERENTE .

    VAR             reduce using rule 56 (operador_logico -> DIFERENTE .)
    ENTERO          reduce using rule 56 (operador_logico -> DIFERENTE .)
    FLOTANTE        reduce using rule 56 (operador_logico -> DIFERENTE .)


state 65

    (29) if -> if elseif else .

    ELSE            reduce using rule 29 (if -> if elseif else .)
    ELSEIF          reduce using rule 29 (if -> if elseif else .)
    $end            reduce using rule 29 (if -> if elseif else .)
    RETURN          reduce using rule 29 (if -> if elseif else .)
    VAR             reduce using rule 29 (if -> if elseif else .)
    WHILE           reduce using rule 29 (if -> if elseif else .)
    IF              reduce using rule 29 (if -> if elseif else .)


state 66

    (33) else -> ELSE LBRACE . RBRACE

    RBRACE          shift and go to state 98


state 67

    (31) elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE RBRACE
    (32) elseif -> ELSEIF LPAREN . condicion RPAREN LBRACE RBRACE elseif
    (34) condicion -> . argumentologico
    (35) condicion -> . argumentologico conector_logico condicion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    VAR             shift and go to state 71
    BOOLEANO        shift and go to state 72
    CADENA          shift and go to state 73
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    condicion                      shift and go to state 99
    argumentologico                shift and go to state 70
    numero                         shift and go to state 28

state 68

    (86) funcion -> FUNCTION tipo_funcion LBRACE . final_funcion RBRACE
    (89) final_funcion -> . RETURN VAR EOL
    (90) final_funcion -> . cuerpo_funcion
    (91) cuerpo_funcion -> . declaracion_numeros final_funcion
    (92) cuerpo_funcion -> . array final_funcion
    (93) cuerpo_funcion -> . estructuracontrol final_funcion
    (69) declaracion_numeros -> . VAR ASIGNACION numero EOL
    (70) array -> . VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL
    (24) estructuracontrol -> . while
    (25) estructuracontrol -> . if
    (26) while -> . WHILE LPAREN condicion RPAREN LBRACE RBRACE
    (27) if -> . IF LPAREN condicion RPAREN LBRACE RBRACE
    (28) if -> . if else
    (29) if -> . if elseif else
    (30) if -> . if elseif

    RETURN          shift and go to state 101
    VAR             shift and go to state 102
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    final_funcion                  shift and go to state 100
    cuerpo_funcion                 shift and go to state 103
    declaracion_numeros            shift and go to state 104
    array                          shift and go to state 105
    estructuracontrol              shift and go to state 106
    while                          shift and go to state 11
    if                             shift and go to state 12

state 69

    (26) while -> WHILE LPAREN condicion . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 107


state 70

    (34) condicion -> argumentologico .
    (35) condicion -> argumentologico . conector_logico condicion
    (37) conector_logico -> . AND
    (38) conector_logico -> . OR

    RPAREN          reduce using rule 34 (condicion -> argumentologico .)
    AND             shift and go to state 109
    OR              shift and go to state 110

    conector_logico                shift and go to state 108

state 71

    (41) argumentologico -> VAR . operador_logico VAR
    (43) argumentologico -> VAR . operador_logico numero
    (44) argumentologico -> VAR . IGUAL BOOLEANO
    (45) argumentologico -> VAR . IGUAL CADENA
    (46) argumentologico -> VAR . DIFERENTE BOOLEANO
    (47) argumentologico -> VAR . DIFERENTE CADENA
    (55) operador_logico -> . IGUAL
    (56) operador_logico -> . DIFERENTE
    (57) operador_logico -> . MENOR
    (58) operador_logico -> . MAYOR
    (59) operador_logico -> . MENOR_IGUAL
    (60) operador_logico -> . MAYOR_IGUAL

    IGUAL           shift and go to state 56
    DIFERENTE       shift and go to state 57
    MENOR           shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR_IGUAL     shift and go to state 60
    MAYOR_IGUAL     shift and go to state 61

    operador_logico                shift and go to state 55

state 72

    (49) argumentologico -> BOOLEANO . IGUAL VAR
    (54) argumentologico -> BOOLEANO .

    IGUAL           shift and go to state 52
    AND             reduce using rule 54 (argumentologico -> BOOLEANO .)
    OR              reduce using rule 54 (argumentologico -> BOOLEANO .)
    RPAREN          reduce using rule 54 (argumentologico -> BOOLEANO .)


state 73

    (50) argumentologico -> CADENA . IGUAL VAR
    (51) argumentologico -> CADENA . IGUAL CADENA
    (52) argumentologico -> CADENA . DIFERENTE VAR
    (53) argumentologico -> CADENA . DIFERENTE CADENA

    IGUAL           shift and go to state 53
    DIFERENTE       shift and go to state 54


state 74

    (67) numero -> ENTERO .

    IGUAL           reduce using rule 67 (numero -> ENTERO .)
    DIFERENTE       reduce using rule 67 (numero -> ENTERO .)
    MENOR           reduce using rule 67 (numero -> ENTERO .)
    MAYOR           reduce using rule 67 (numero -> ENTERO .)
    MENOR_IGUAL     reduce using rule 67 (numero -> ENTERO .)
    MAYOR_IGUAL     reduce using rule 67 (numero -> ENTERO .)
    COMA            reduce using rule 67 (numero -> ENTERO .)
    EOL             reduce using rule 67 (numero -> ENTERO .)
    AND             reduce using rule 67 (numero -> ENTERO .)
    OR              reduce using rule 67 (numero -> ENTERO .)
    RPAREN          reduce using rule 67 (numero -> ENTERO .)


state 75

    (68) numero -> FLOTANTE .

    IGUAL           reduce using rule 68 (numero -> FLOTANTE .)
    DIFERENTE       reduce using rule 68 (numero -> FLOTANTE .)
    MENOR           reduce using rule 68 (numero -> FLOTANTE .)
    MAYOR           reduce using rule 68 (numero -> FLOTANTE .)
    MENOR_IGUAL     reduce using rule 68 (numero -> FLOTANTE .)
    MAYOR_IGUAL     reduce using rule 68 (numero -> FLOTANTE .)
    COMA            reduce using rule 68 (numero -> FLOTANTE .)
    EOL             reduce using rule 68 (numero -> FLOTANTE .)
    AND             reduce using rule 68 (numero -> FLOTANTE .)
    OR              reduce using rule 68 (numero -> FLOTANTE .)
    RPAREN          reduce using rule 68 (numero -> FLOTANTE .)


state 76

    (27) if -> IF LPAREN condicion . RPAREN LBRACE RBRACE

    RPAREN          shift and go to state 111


state 77

    (8) asignacion -> VAR ASIGNACION valor EOL .

    $end            reduce using rule 8 (asignacion -> VAR ASIGNACION valor EOL .)


state 78

    (69) declaracion_numeros -> VAR ASIGNACION numero EOL .

    $end            reduce using rule 69 (declaracion_numeros -> VAR ASIGNACION numero EOL .)
    RETURN          reduce using rule 69 (declaracion_numeros -> VAR ASIGNACION numero EOL .)
    VAR             reduce using rule 69 (declaracion_numeros -> VAR ASIGNACION numero EOL .)
    WHILE           reduce using rule 69 (declaracion_numeros -> VAR ASIGNACION numero EOL .)
    IF              reduce using rule 69 (declaracion_numeros -> VAR ASIGNACION numero EOL .)


state 79

    (70) array -> VAR ASIGNACION ARRAY LPAREN . elementos RPAREN EOL
    (71) elementos -> . lista
    (72) elementos -> . diccionario
    (77) lista -> . palabras
    (78) lista -> . numeros
    (79) lista -> . variables
    (73) diccionario -> . CADENA ASIGNACION MAYOR valor_dic
    (74) diccionario -> . CADENA ASIGNACION MAYOR valor COMA diccionario
    (80) palabras -> . CADENA COMA palabras
    (81) palabras -> . CADENA
    (82) numeros -> . numero COMA numeros
    (83) numeros -> . numero
    (84) variables -> . VAR COMA variables
    (85) variables -> . VAR
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    CADENA          shift and go to state 119
    VAR             shift and go to state 112
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    elementos                      shift and go to state 113
    lista                          shift and go to state 114
    diccionario                    shift and go to state 115
    palabras                       shift and go to state 116
    numeros                        shift and go to state 117
    variables                      shift and go to state 118
    numero                         shift and go to state 120

state 80

    (11) valores -> valor COMA valores .

    EOL             reduce using rule 11 (valores -> valor COMA valores .)


state 81

    (20) operacion -> ENTERO .
    (22) operacion -> ENTERO . operador operacion
    (62) operador -> . SUMA
    (63) operador -> . RESTA
    (64) operador -> . MULT
    (65) operador -> . DIV
    (66) operador -> . POT

    COMA            reduce using rule 20 (operacion -> ENTERO .)
    EOL             reduce using rule 20 (operacion -> ENTERO .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULT            shift and go to state 48
    DIV             shift and go to state 49
    POT             shift and go to state 50

    operador                       shift and go to state 45

state 82

    (22) operacion -> ENTERO operador operacion .

    COMA            reduce using rule 22 (operacion -> ENTERO operador operacion .)
    EOL             reduce using rule 22 (operacion -> ENTERO operador operacion .)


state 83

    (21) operacion -> FLOTANTE .
    (23) operacion -> FLOTANTE . operador operacion
    (62) operador -> . SUMA
    (63) operador -> . RESTA
    (64) operador -> . MULT
    (65) operador -> . DIV
    (66) operador -> . POT

    COMA            reduce using rule 21 (operacion -> FLOTANTE .)
    EOL             reduce using rule 21 (operacion -> FLOTANTE .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULT            shift and go to state 48
    DIV             shift and go to state 49
    POT             shift and go to state 50

    operador                       shift and go to state 51

state 84

    (23) operacion -> FLOTANTE operador operacion .

    COMA            reduce using rule 23 (operacion -> FLOTANTE operador operacion .)
    EOL             reduce using rule 23 (operacion -> FLOTANTE operador operacion .)


state 85

    (49) argumentologico -> BOOLEANO IGUAL VAR .

    COMA            reduce using rule 49 (argumentologico -> BOOLEANO IGUAL VAR .)
    EOL             reduce using rule 49 (argumentologico -> BOOLEANO IGUAL VAR .)
    AND             reduce using rule 49 (argumentologico -> BOOLEANO IGUAL VAR .)
    OR              reduce using rule 49 (argumentologico -> BOOLEANO IGUAL VAR .)
    RPAREN          reduce using rule 49 (argumentologico -> BOOLEANO IGUAL VAR .)


state 86

    (51) argumentologico -> CADENA IGUAL CADENA .

    COMA            reduce using rule 51 (argumentologico -> CADENA IGUAL CADENA .)
    EOL             reduce using rule 51 (argumentologico -> CADENA IGUAL CADENA .)
    AND             reduce using rule 51 (argumentologico -> CADENA IGUAL CADENA .)
    OR              reduce using rule 51 (argumentologico -> CADENA IGUAL CADENA .)
    RPAREN          reduce using rule 51 (argumentologico -> CADENA IGUAL CADENA .)


state 87

    (50) argumentologico -> CADENA IGUAL VAR .

    COMA            reduce using rule 50 (argumentologico -> CADENA IGUAL VAR .)
    EOL             reduce using rule 50 (argumentologico -> CADENA IGUAL VAR .)
    AND             reduce using rule 50 (argumentologico -> CADENA IGUAL VAR .)
    OR              reduce using rule 50 (argumentologico -> CADENA IGUAL VAR .)
    RPAREN          reduce using rule 50 (argumentologico -> CADENA IGUAL VAR .)


state 88

    (53) argumentologico -> CADENA DIFERENTE CADENA .

    COMA            reduce using rule 53 (argumentologico -> CADENA DIFERENTE CADENA .)
    EOL             reduce using rule 53 (argumentologico -> CADENA DIFERENTE CADENA .)
    AND             reduce using rule 53 (argumentologico -> CADENA DIFERENTE CADENA .)
    OR              reduce using rule 53 (argumentologico -> CADENA DIFERENTE CADENA .)
    RPAREN          reduce using rule 53 (argumentologico -> CADENA DIFERENTE CADENA .)


state 89

    (52) argumentologico -> CADENA DIFERENTE VAR .

    COMA            reduce using rule 52 (argumentologico -> CADENA DIFERENTE VAR .)
    EOL             reduce using rule 52 (argumentologico -> CADENA DIFERENTE VAR .)
    AND             reduce using rule 52 (argumentologico -> CADENA DIFERENTE VAR .)
    OR              reduce using rule 52 (argumentologico -> CADENA DIFERENTE VAR .)
    RPAREN          reduce using rule 52 (argumentologico -> CADENA DIFERENTE VAR .)


state 90

    (41) argumentologico -> VAR operador_logico VAR .

    COMA            reduce using rule 41 (argumentologico -> VAR operador_logico VAR .)
    EOL             reduce using rule 41 (argumentologico -> VAR operador_logico VAR .)
    AND             reduce using rule 41 (argumentologico -> VAR operador_logico VAR .)
    OR              reduce using rule 41 (argumentologico -> VAR operador_logico VAR .)
    RPAREN          reduce using rule 41 (argumentologico -> VAR operador_logico VAR .)


state 91

    (43) argumentologico -> VAR operador_logico numero .

    COMA            reduce using rule 43 (argumentologico -> VAR operador_logico numero .)
    EOL             reduce using rule 43 (argumentologico -> VAR operador_logico numero .)
    AND             reduce using rule 43 (argumentologico -> VAR operador_logico numero .)
    OR              reduce using rule 43 (argumentologico -> VAR operador_logico numero .)
    RPAREN          reduce using rule 43 (argumentologico -> VAR operador_logico numero .)


state 92

    (44) argumentologico -> VAR IGUAL BOOLEANO .

    COMA            reduce using rule 44 (argumentologico -> VAR IGUAL BOOLEANO .)
    EOL             reduce using rule 44 (argumentologico -> VAR IGUAL BOOLEANO .)
    AND             reduce using rule 44 (argumentologico -> VAR IGUAL BOOLEANO .)
    OR              reduce using rule 44 (argumentologico -> VAR IGUAL BOOLEANO .)
    RPAREN          reduce using rule 44 (argumentologico -> VAR IGUAL BOOLEANO .)


state 93

    (45) argumentologico -> VAR IGUAL CADENA .

    COMA            reduce using rule 45 (argumentologico -> VAR IGUAL CADENA .)
    EOL             reduce using rule 45 (argumentologico -> VAR IGUAL CADENA .)
    AND             reduce using rule 45 (argumentologico -> VAR IGUAL CADENA .)
    OR              reduce using rule 45 (argumentologico -> VAR IGUAL CADENA .)
    RPAREN          reduce using rule 45 (argumentologico -> VAR IGUAL CADENA .)


state 94

    (46) argumentologico -> VAR DIFERENTE BOOLEANO .

    COMA            reduce using rule 46 (argumentologico -> VAR DIFERENTE BOOLEANO .)
    EOL             reduce using rule 46 (argumentologico -> VAR DIFERENTE BOOLEANO .)
    AND             reduce using rule 46 (argumentologico -> VAR DIFERENTE BOOLEANO .)
    OR              reduce using rule 46 (argumentologico -> VAR DIFERENTE BOOLEANO .)
    RPAREN          reduce using rule 46 (argumentologico -> VAR DIFERENTE BOOLEANO .)


state 95

    (47) argumentologico -> VAR DIFERENTE CADENA .

    COMA            reduce using rule 47 (argumentologico -> VAR DIFERENTE CADENA .)
    EOL             reduce using rule 47 (argumentologico -> VAR DIFERENTE CADENA .)
    AND             reduce using rule 47 (argumentologico -> VAR DIFERENTE CADENA .)
    OR              reduce using rule 47 (argumentologico -> VAR DIFERENTE CADENA .)
    RPAREN          reduce using rule 47 (argumentologico -> VAR DIFERENTE CADENA .)


state 96

    (42) argumentologico -> numero operador_logico numero .

    COMA            reduce using rule 42 (argumentologico -> numero operador_logico numero .)
    EOL             reduce using rule 42 (argumentologico -> numero operador_logico numero .)
    AND             reduce using rule 42 (argumentologico -> numero operador_logico numero .)
    OR              reduce using rule 42 (argumentologico -> numero operador_logico numero .)
    RPAREN          reduce using rule 42 (argumentologico -> numero operador_logico numero .)


state 97

    (48) argumentologico -> numero operador_logico VAR .

    COMA            reduce using rule 48 (argumentologico -> numero operador_logico VAR .)
    EOL             reduce using rule 48 (argumentologico -> numero operador_logico VAR .)
    AND             reduce using rule 48 (argumentologico -> numero operador_logico VAR .)
    OR              reduce using rule 48 (argumentologico -> numero operador_logico VAR .)
    RPAREN          reduce using rule 48 (argumentologico -> numero operador_logico VAR .)


state 98

    (33) else -> ELSE LBRACE RBRACE .

    ELSE            reduce using rule 33 (else -> ELSE LBRACE RBRACE .)
    ELSEIF          reduce using rule 33 (else -> ELSE LBRACE RBRACE .)
    $end            reduce using rule 33 (else -> ELSE LBRACE RBRACE .)
    RETURN          reduce using rule 33 (else -> ELSE LBRACE RBRACE .)
    VAR             reduce using rule 33 (else -> ELSE LBRACE RBRACE .)
    WHILE           reduce using rule 33 (else -> ELSE LBRACE RBRACE .)
    IF              reduce using rule 33 (else -> ELSE LBRACE RBRACE .)


state 99

    (31) elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE RBRACE
    (32) elseif -> ELSEIF LPAREN condicion . RPAREN LBRACE RBRACE elseif

    RPAREN          shift and go to state 121


state 100

    (86) funcion -> FUNCTION tipo_funcion LBRACE final_funcion . RBRACE

    RBRACE          shift and go to state 122


state 101

    (89) final_funcion -> RETURN . VAR EOL

    VAR             shift and go to state 123


state 102

    (69) declaracion_numeros -> VAR . ASIGNACION numero EOL
    (70) array -> VAR . ASIGNACION ARRAY LPAREN elementos RPAREN EOL

    ASIGNACION      shift and go to state 124


state 103

    (90) final_funcion -> cuerpo_funcion .

    RBRACE          reduce using rule 90 (final_funcion -> cuerpo_funcion .)


state 104

    (91) cuerpo_funcion -> declaracion_numeros . final_funcion
    (89) final_funcion -> . RETURN VAR EOL
    (90) final_funcion -> . cuerpo_funcion
    (91) cuerpo_funcion -> . declaracion_numeros final_funcion
    (92) cuerpo_funcion -> . array final_funcion
    (93) cuerpo_funcion -> . estructuracontrol final_funcion
    (69) declaracion_numeros -> . VAR ASIGNACION numero EOL
    (70) array -> . VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL
    (24) estructuracontrol -> . while
    (25) estructuracontrol -> . if
    (26) while -> . WHILE LPAREN condicion RPAREN LBRACE RBRACE
    (27) if -> . IF LPAREN condicion RPAREN LBRACE RBRACE
    (28) if -> . if else
    (29) if -> . if elseif else
    (30) if -> . if elseif

    RETURN          shift and go to state 101
    VAR             shift and go to state 102
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    declaracion_numeros            shift and go to state 104
    final_funcion                  shift and go to state 125
    cuerpo_funcion                 shift and go to state 103
    array                          shift and go to state 105
    estructuracontrol              shift and go to state 106
    while                          shift and go to state 11
    if                             shift and go to state 12

state 105

    (92) cuerpo_funcion -> array . final_funcion
    (89) final_funcion -> . RETURN VAR EOL
    (90) final_funcion -> . cuerpo_funcion
    (91) cuerpo_funcion -> . declaracion_numeros final_funcion
    (92) cuerpo_funcion -> . array final_funcion
    (93) cuerpo_funcion -> . estructuracontrol final_funcion
    (69) declaracion_numeros -> . VAR ASIGNACION numero EOL
    (70) array -> . VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL
    (24) estructuracontrol -> . while
    (25) estructuracontrol -> . if
    (26) while -> . WHILE LPAREN condicion RPAREN LBRACE RBRACE
    (27) if -> . IF LPAREN condicion RPAREN LBRACE RBRACE
    (28) if -> . if else
    (29) if -> . if elseif else
    (30) if -> . if elseif

    RETURN          shift and go to state 101
    VAR             shift and go to state 102
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    array                          shift and go to state 105
    final_funcion                  shift and go to state 126
    cuerpo_funcion                 shift and go to state 103
    declaracion_numeros            shift and go to state 104
    estructuracontrol              shift and go to state 106
    while                          shift and go to state 11
    if                             shift and go to state 12

state 106

    (93) cuerpo_funcion -> estructuracontrol . final_funcion
    (89) final_funcion -> . RETURN VAR EOL
    (90) final_funcion -> . cuerpo_funcion
    (91) cuerpo_funcion -> . declaracion_numeros final_funcion
    (92) cuerpo_funcion -> . array final_funcion
    (93) cuerpo_funcion -> . estructuracontrol final_funcion
    (69) declaracion_numeros -> . VAR ASIGNACION numero EOL
    (70) array -> . VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL
    (24) estructuracontrol -> . while
    (25) estructuracontrol -> . if
    (26) while -> . WHILE LPAREN condicion RPAREN LBRACE RBRACE
    (27) if -> . IF LPAREN condicion RPAREN LBRACE RBRACE
    (28) if -> . if else
    (29) if -> . if elseif else
    (30) if -> . if elseif

    RETURN          shift and go to state 101
    VAR             shift and go to state 102
    WHILE           shift and go to state 15
    IF              shift and go to state 16

    estructuracontrol              shift and go to state 106
    final_funcion                  shift and go to state 127
    cuerpo_funcion                 shift and go to state 103
    declaracion_numeros            shift and go to state 104
    array                          shift and go to state 105
    while                          shift and go to state 11
    if                             shift and go to state 12

state 107

    (26) while -> WHILE LPAREN condicion RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 128


state 108

    (35) condicion -> argumentologico conector_logico . condicion
    (34) condicion -> . argumentologico
    (35) condicion -> . argumentologico conector_logico condicion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    VAR             shift and go to state 71
    BOOLEANO        shift and go to state 72
    CADENA          shift and go to state 73
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    argumentologico                shift and go to state 70
    condicion                      shift and go to state 129
    numero                         shift and go to state 28

state 109

    (37) conector_logico -> AND .

    VAR             reduce using rule 37 (conector_logico -> AND .)
    BOOLEANO        reduce using rule 37 (conector_logico -> AND .)
    CADENA          reduce using rule 37 (conector_logico -> AND .)
    ENTERO          reduce using rule 37 (conector_logico -> AND .)
    FLOTANTE        reduce using rule 37 (conector_logico -> AND .)


state 110

    (38) conector_logico -> OR .

    VAR             reduce using rule 38 (conector_logico -> OR .)
    BOOLEANO        reduce using rule 38 (conector_logico -> OR .)
    CADENA          reduce using rule 38 (conector_logico -> OR .)
    ENTERO          reduce using rule 38 (conector_logico -> OR .)
    FLOTANTE        reduce using rule 38 (conector_logico -> OR .)


state 111

    (27) if -> IF LPAREN condicion RPAREN . LBRACE RBRACE

    LBRACE          shift and go to state 130


state 112

    (84) variables -> VAR . COMA variables
    (85) variables -> VAR .

    COMA            shift and go to state 131
    RPAREN          reduce using rule 85 (variables -> VAR .)


state 113

    (70) array -> VAR ASIGNACION ARRAY LPAREN elementos . RPAREN EOL

    RPAREN          shift and go to state 132


state 114

    (71) elementos -> lista .

    RPAREN          reduce using rule 71 (elementos -> lista .)


state 115

    (72) elementos -> diccionario .

    RPAREN          reduce using rule 72 (elementos -> diccionario .)


state 116

    (77) lista -> palabras .

    RPAREN          reduce using rule 77 (lista -> palabras .)


state 117

    (78) lista -> numeros .

    RPAREN          reduce using rule 78 (lista -> numeros .)


state 118

    (79) lista -> variables .

    RPAREN          reduce using rule 79 (lista -> variables .)


state 119

    (73) diccionario -> CADENA . ASIGNACION MAYOR valor_dic
    (74) diccionario -> CADENA . ASIGNACION MAYOR valor COMA diccionario
    (80) palabras -> CADENA . COMA palabras
    (81) palabras -> CADENA .

    ASIGNACION      shift and go to state 133
    COMA            shift and go to state 134
    RPAREN          reduce using rule 81 (palabras -> CADENA .)


state 120

    (82) numeros -> numero . COMA numeros
    (83) numeros -> numero .

    COMA            shift and go to state 135
    RPAREN          reduce using rule 83 (numeros -> numero .)


state 121

    (31) elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE RBRACE
    (32) elseif -> ELSEIF LPAREN condicion RPAREN . LBRACE RBRACE elseif

    LBRACE          shift and go to state 136


state 122

    (86) funcion -> FUNCTION tipo_funcion LBRACE final_funcion RBRACE .

    $end            reduce using rule 86 (funcion -> FUNCTION tipo_funcion LBRACE final_funcion RBRACE .)


state 123

    (89) final_funcion -> RETURN VAR . EOL

    EOL             shift and go to state 137


state 124

    (69) declaracion_numeros -> VAR ASIGNACION . numero EOL
    (70) array -> VAR ASIGNACION . ARRAY LPAREN elementos RPAREN EOL
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    ARRAY           shift and go to state 40
    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    numero                         shift and go to state 138

state 125

    (91) cuerpo_funcion -> declaracion_numeros final_funcion .

    RBRACE          reduce using rule 91 (cuerpo_funcion -> declaracion_numeros final_funcion .)


state 126

    (92) cuerpo_funcion -> array final_funcion .

    RBRACE          reduce using rule 92 (cuerpo_funcion -> array final_funcion .)


state 127

    (93) cuerpo_funcion -> estructuracontrol final_funcion .

    RBRACE          reduce using rule 93 (cuerpo_funcion -> estructuracontrol final_funcion .)


state 128

    (26) while -> WHILE LPAREN condicion RPAREN LBRACE . RBRACE

    RBRACE          shift and go to state 139


state 129

    (35) condicion -> argumentologico conector_logico condicion .

    RPAREN          reduce using rule 35 (condicion -> argumentologico conector_logico condicion .)


state 130

    (27) if -> IF LPAREN condicion RPAREN LBRACE . RBRACE

    RBRACE          shift and go to state 140


state 131

    (84) variables -> VAR COMA . variables
    (84) variables -> . VAR COMA variables
    (85) variables -> . VAR

    VAR             shift and go to state 112

    variables                      shift and go to state 141

state 132

    (70) array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN . EOL

    EOL             shift and go to state 142


state 133

    (73) diccionario -> CADENA ASIGNACION . MAYOR valor_dic
    (74) diccionario -> CADENA ASIGNACION . MAYOR valor COMA diccionario

    MAYOR           shift and go to state 143


state 134

    (80) palabras -> CADENA COMA . palabras
    (80) palabras -> . CADENA COMA palabras
    (81) palabras -> . CADENA

    CADENA          shift and go to state 144

    palabras                       shift and go to state 145

state 135

    (82) numeros -> numero COMA . numeros
    (82) numeros -> . numero COMA numeros
    (83) numeros -> . numero
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE

    ENTERO          shift and go to state 74
    FLOTANTE        shift and go to state 75

    numero                         shift and go to state 120
    numeros                        shift and go to state 146

state 136

    (31) elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . RBRACE
    (32) elseif -> ELSEIF LPAREN condicion RPAREN LBRACE . RBRACE elseif

    RBRACE          shift and go to state 147


state 137

    (89) final_funcion -> RETURN VAR EOL .

    RBRACE          reduce using rule 89 (final_funcion -> RETURN VAR EOL .)


state 138

    (69) declaracion_numeros -> VAR ASIGNACION numero . EOL

    EOL             shift and go to state 78


state 139

    (26) while -> WHILE LPAREN condicion RPAREN LBRACE RBRACE .

    $end            reduce using rule 26 (while -> WHILE LPAREN condicion RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 26 (while -> WHILE LPAREN condicion RPAREN LBRACE RBRACE .)
    VAR             reduce using rule 26 (while -> WHILE LPAREN condicion RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 26 (while -> WHILE LPAREN condicion RPAREN LBRACE RBRACE .)
    IF              reduce using rule 26 (while -> WHILE LPAREN condicion RPAREN LBRACE RBRACE .)


state 140

    (27) if -> IF LPAREN condicion RPAREN LBRACE RBRACE .

    ELSE            reduce using rule 27 (if -> IF LPAREN condicion RPAREN LBRACE RBRACE .)
    ELSEIF          reduce using rule 27 (if -> IF LPAREN condicion RPAREN LBRACE RBRACE .)
    $end            reduce using rule 27 (if -> IF LPAREN condicion RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 27 (if -> IF LPAREN condicion RPAREN LBRACE RBRACE .)
    VAR             reduce using rule 27 (if -> IF LPAREN condicion RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 27 (if -> IF LPAREN condicion RPAREN LBRACE RBRACE .)
    IF              reduce using rule 27 (if -> IF LPAREN condicion RPAREN LBRACE RBRACE .)


state 141

    (84) variables -> VAR COMA variables .

    RPAREN          reduce using rule 84 (variables -> VAR COMA variables .)


state 142

    (70) array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL .

    $end            reduce using rule 70 (array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL .)
    RETURN          reduce using rule 70 (array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL .)
    VAR             reduce using rule 70 (array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL .)
    WHILE           reduce using rule 70 (array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL .)
    IF              reduce using rule 70 (array -> VAR ASIGNACION ARRAY LPAREN elementos RPAREN EOL .)


state 143

    (73) diccionario -> CADENA ASIGNACION MAYOR . valor_dic
    (74) diccionario -> CADENA ASIGNACION MAYOR . valor COMA diccionario
    (75) valor_dic -> . numero
    (76) valor_dic -> . CADENA
    (12) valor -> . ENTERO
    (13) valor -> . FLOTANTE
    (14) valor -> . BOOLEANO
    (15) valor -> . CADENA
    (16) valor -> . VAR
    (17) valor -> . VARIABLE_ARRAY
    (18) valor -> . operacion
    (19) valor -> . argumentologico
    (67) numero -> . ENTERO
    (68) numero -> . FLOTANTE
    (20) operacion -> . ENTERO
    (21) operacion -> . FLOTANTE
    (22) operacion -> . ENTERO operador operacion
    (23) operacion -> . FLOTANTE operador operacion
    (41) argumentologico -> . VAR operador_logico VAR
    (42) argumentologico -> . numero operador_logico numero
    (43) argumentologico -> . VAR operador_logico numero
    (44) argumentologico -> . VAR IGUAL BOOLEANO
    (45) argumentologico -> . VAR IGUAL CADENA
    (46) argumentologico -> . VAR DIFERENTE BOOLEANO
    (47) argumentologico -> . VAR DIFERENTE CADENA
    (48) argumentologico -> . numero operador_logico VAR
    (49) argumentologico -> . BOOLEANO IGUAL VAR
    (50) argumentologico -> . CADENA IGUAL VAR
    (51) argumentologico -> . CADENA IGUAL CADENA
    (52) argumentologico -> . CADENA DIFERENTE VAR
    (53) argumentologico -> . CADENA DIFERENTE CADENA
    (54) argumentologico -> . BOOLEANO

    CADENA          shift and go to state 148
    ENTERO          shift and go to state 41
    FLOTANTE        shift and go to state 42
    BOOLEANO        shift and go to state 22
    VAR             shift and go to state 24
    VARIABLE_ARRAY  shift and go to state 25

    valor_dic                      shift and go to state 149
    valor                          shift and go to state 150
    numero                         shift and go to state 151
    operacion                      shift and go to state 26
    argumentologico                shift and go to state 27

state 144

    (80) palabras -> CADENA . COMA palabras
    (81) palabras -> CADENA .

    COMA            shift and go to state 134
    RPAREN          reduce using rule 81 (palabras -> CADENA .)


state 145

    (80) palabras -> CADENA COMA palabras .

    RPAREN          reduce using rule 80 (palabras -> CADENA COMA palabras .)


state 146

    (82) numeros -> numero COMA numeros .

    RPAREN          reduce using rule 82 (numeros -> numero COMA numeros .)


state 147

    (31) elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .
    (32) elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE . elseif
    (31) elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE RBRACE
    (32) elseif -> . ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif

  ! shift/reduce conflict for ELSEIF resolved as shift
    ELSE            reduce using rule 31 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .)
    $end            reduce using rule 31 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .)
    RETURN          reduce using rule 31 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .)
    VAR             reduce using rule 31 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .)
    WHILE           reduce using rule 31 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .)
    IF              reduce using rule 31 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .)
    ELSEIF          shift and go to state 32

  ! ELSEIF          [ reduce using rule 31 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE .) ]

    elseif                         shift and go to state 152

state 148

    (76) valor_dic -> CADENA .
    (15) valor -> CADENA .
    (50) argumentologico -> CADENA . IGUAL VAR
    (51) argumentologico -> CADENA . IGUAL CADENA
    (52) argumentologico -> CADENA . DIFERENTE VAR
    (53) argumentologico -> CADENA . DIFERENTE CADENA

    RPAREN          reduce using rule 76 (valor_dic -> CADENA .)
    COMA            reduce using rule 15 (valor -> CADENA .)
    IGUAL           shift and go to state 53
    DIFERENTE       shift and go to state 54


state 149

    (73) diccionario -> CADENA ASIGNACION MAYOR valor_dic .

    RPAREN          reduce using rule 73 (diccionario -> CADENA ASIGNACION MAYOR valor_dic .)


state 150

    (74) diccionario -> CADENA ASIGNACION MAYOR valor . COMA diccionario

    COMA            shift and go to state 153


state 151

    (75) valor_dic -> numero .
    (42) argumentologico -> numero . operador_logico numero
    (48) argumentologico -> numero . operador_logico VAR
    (55) operador_logico -> . IGUAL
    (56) operador_logico -> . DIFERENTE
    (57) operador_logico -> . MENOR
    (58) operador_logico -> . MAYOR
    (59) operador_logico -> . MENOR_IGUAL
    (60) operador_logico -> . MAYOR_IGUAL

    RPAREN          reduce using rule 75 (valor_dic -> numero .)
    IGUAL           shift and go to state 63
    DIFERENTE       shift and go to state 64
    MENOR           shift and go to state 58
    MAYOR           shift and go to state 59
    MENOR_IGUAL     shift and go to state 60
    MAYOR_IGUAL     shift and go to state 61

    operador_logico                shift and go to state 62

state 152

    (32) elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .

    ELSE            reduce using rule 32 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .)
    ELSEIF          reduce using rule 32 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .)
    $end            reduce using rule 32 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .)
    RETURN          reduce using rule 32 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .)
    VAR             reduce using rule 32 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .)
    WHILE           reduce using rule 32 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .)
    IF              reduce using rule 32 (elseif -> ELSEIF LPAREN condicion RPAREN LBRACE RBRACE elseif .)


state 153

    (74) diccionario -> CADENA ASIGNACION MAYOR valor COMA . diccionario
    (73) diccionario -> . CADENA ASIGNACION MAYOR valor_dic
    (74) diccionario -> . CADENA ASIGNACION MAYOR valor COMA diccionario

    CADENA          shift and go to state 154

    diccionario                    shift and go to state 155

state 154

    (73) diccionario -> CADENA . ASIGNACION MAYOR valor_dic
    (74) diccionario -> CADENA . ASIGNACION MAYOR valor COMA diccionario

    ASIGNACION      shift and go to state 133


state 155

    (74) diccionario -> CADENA ASIGNACION MAYOR valor COMA diccionario .

    RPAREN          reduce using rule 74 (diccionario -> CADENA ASIGNACION MAYOR valor COMA diccionario .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 30 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 147 resolved as shift
WARNING: reduce/reduce conflict in state 20 resolved using rule (valor -> ENTERO)
WARNING: rejected rule (operacion -> ENTERO) in state 20
WARNING: reduce/reduce conflict in state 21 resolved using rule (valor -> FLOTANTE)
WARNING: rejected rule (operacion -> FLOTANTE) in state 21
WARNING: reduce/reduce conflict in state 22 resolved using rule (valor -> BOOLEANO)
WARNING: rejected rule (argumentologico -> BOOLEANO) in state 22
WARNING: reduce/reduce conflict in state 41 resolved using rule (valor -> ENTERO)
WARNING: rejected rule (numero -> ENTERO) in state 41
WARNING: reduce/reduce conflict in state 41 resolved using rule (valor -> ENTERO)
WARNING: rejected rule (operacion -> ENTERO) in state 41
WARNING: reduce/reduce conflict in state 42 resolved using rule (valor -> FLOTANTE)
WARNING: rejected rule (numero -> FLOTANTE) in state 42
WARNING: reduce/reduce conflict in state 42 resolved using rule (valor -> FLOTANTE)
WARNING: rejected rule (operacion -> FLOTANTE) in state 42
